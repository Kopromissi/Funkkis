
==================== FINAL INTERFACE ====================
2017-11-05 11:22:56.1077864 UTC

interface main@main:Main 8002
  interface hash: 0bd4db3ff5d376f601e9082b2670b9a8
  ABI hash: 22248d76c71fc8991b6ae4d7ca72fa89
  export-list hash: 54af6416652379342f7fe489fd70481c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9ebae80851e84626ab0fb0088d0ac702
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main..*
  Main..+
  Main..-
  Main.cycleCoordinates
  Main.drawWorld
  Main.handleEvents
  Main.initialWorld
  Main.limitMag
  Main.magV
  Main.main
  Main.norm
  Main.restoreToScreen
  Main.rotateV
  Main.simulateWorld
  Main.splitRock
  Main.Age
  Main.AsteroidWorld{Main.GameOver Main.Play}
  Main.Bullet{Main.Bullet}
  Main.PointInSpace
  Main.Rock{Main.Rock}
  Main.Ship{Main.Ship}
  Main.Size
  Main.Velocity
module dependencies:
package dependencies: GLURaw-2.0.0.3@GLURaw-2.0.0.3-Dsh0J6RJGCYIX4KzhPpy5R
                      GLUT-2.7.0.12@GLUT-2.7.0.12-DC8hzFoSREsLOe0a29m1po
                      ObjectName-1.1.0.1@ObjectName-1.1.0.1-EiFOWjUQWWuLyOhtrmuIWX
                      OpenGL-3.0.2.0@OpenGL-3.0.2.0-6fbDRkN7rpfG63nVz30IBa
                      OpenGLRaw-3.2.5.0@OpenGLRaw-3.2.5.0-8JxKpZbO2kWCx46iLc1G4X
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bmp-1.2.6.3@bmp-1.2.6.3-43OLkH0uuwm831pBFpx2PZ
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fixed-0.2.1.1@fixed-0.2.1.1-8Jr82l0kss5Gr4nEevmXlZ ghc-prim-0.5.0.0
                      gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi
                      gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-2H1Z0FJPE28CgZNofHijuT
                      half-0.2.2.3@half-0.2.2.3-GHJ372Ls7FBA3PAGtGHfOR
                      integer-gmp-1.0.0.1 stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-2H1Z0FJPE28CgZNofHijuT:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Float b620368aab866c2bb9d3a0a459566b84
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss bf67b0e05def334587dfecab9a36e1dd
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Data.Color 6fba704f039696621c6ccead346d49ee
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Data.Display af29981e939252b30d71cc51556f99a2
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Data.Picture 6416cbfb640490da3b20f10312b7de20
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Interface.Pure.Display 5fd9b29564627c0e4c8a1e6327336ed6
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Interface.Pure.Game cd4fb24b4b520416f44f3f5de79790dc
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Interface.Pure.Simulate cf92d8de0f8d78549f191e80895504ad
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Internals.Interface.Backend.Types 8461fb1eb67c22da2456dcf4acc9e26b
import  -/  gloss-1.11.1.1@gloss-1.11.1.1-8GzjbnWS46V6aZCKK1kaHi:Graphics.Gloss.Internals.Interface.Event 9324ee6844358392ee004e7b4c424a6c
import  -/  gloss-rendering-1.11.1.1@gloss-rendering-1.11.1.1-2H1Z0FJPE28CgZNofHijuT:Graphics.Gloss.Internals.Data.Picture 3c80646b5e5aa2d2fa3766ba0d19eaf4
fixities infixl 7 .*, infixl 6 .+, infixl 6 .-
02568e80669cf5655d03a8c6d16de9a3
  $fEqAsteroidWorld :: GHC.Classes.Eq Main.AsteroidWorld
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.AsteroidWorld
                  Main.$fEqAsteroidWorld_$c==
                  Main.$fEqAsteroidWorld_$c/= -}
02568e80669cf5655d03a8c6d16de9a3
  $fEqAsteroidWorld_$c/= ::
    Main.AsteroidWorld -> Main.AsteroidWorld -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.AsteroidWorld) (b :: Main.AsteroidWorld) ->
                 case Main.$fEqAsteroidWorld_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
02568e80669cf5655d03a8c6d16de9a3
  $fEqAsteroidWorld_$c== ::
    Main.AsteroidWorld -> Main.AsteroidWorld -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.AsteroidWorld)
                   (ds1 :: Main.AsteroidWorld) ->
                 case ds of wild {
                   Main.Play a1 a2 a3
                   -> case ds1 of wild1 {
                        Main.Play b1 b2 b3
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ Main.Rock
                                  Main.$fEqRock
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case a2 of ww { Main.Ship ww1 ww2 ->
                                case ww1 of ww3 { (,) ww4 ww5 ->
                                case ww4 of ww6 { GHC.Types.F# ww7 ->
                                case b2 of ww8 { Main.Ship ww9 ww10 ->
                                case ww9 of ww11 { (,) ww12 ww13 ->
                                case ww12 of ww14 { GHC.Types.F# ww15 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# ww7 ww15) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case ww5 of wild4 { GHC.Types.F# x ->
                                     case ww13 of wild5 { GHC.Types.F# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.eqFloat# x y) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case ww2 of ww16 { (,) ww17 ww18 ->
                                          case ww10 of ww19 { (,) ww20 ww21 ->
                                          case ww17 of wild7 { GHC.Types.F# x1 ->
                                          case ww20 of wild8 { GHC.Types.F# y1 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.eqFloat# x1 y1) of wild9 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> case ww18 of wild10 { GHC.Types.F# x2 ->
                                               case ww21 of wild11 { GHC.Types.F# y2 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.eqFloat# x2 y2) of wild12 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> GHC.Classes.$fEq[]_$c==
                                                      @ Main.Bullet
                                                      Main.$fEqBullet
                                                      a3
                                                      b3 } } } } } } } } } } } } } } } } } } }
                        Main.GameOver -> GHC.Types.False }
                   Main.GameOver
                   -> case ds1 of wild1 {
                        Main.Play ipv ipv1 ipv2 -> GHC.Types.False
                        Main.GameOver -> GHC.Types.True } }) -}
41ec883c16d8b80831afe166a637da5a
  $fEqBullet :: GHC.Classes.Eq Main.Bullet
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bullet Main.$fEqBullet_$c== Main.$fEqBullet_$c/= -}
41ec883c16d8b80831afe166a637da5a
  $fEqBullet_$c/= :: Main.Bullet -> Main.Bullet -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(U))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Bullet) (b :: Main.Bullet) ->
                 case Main.$fEqBullet_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
41ec883c16d8b80831afe166a637da5a
  $fEqBullet_$c== :: Main.Bullet -> Main.Bullet -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(U))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Bullet) (w1 :: Main.Bullet) ->
                 case w of ww { Main.Bullet ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { Main.Bullet ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 Main.$w$c== ww8 ww6 ww2 ww3 ww17 ww15 ww11 ww12 } } } } } }) -}
36242d754c4a30af0f8aab624f9e06e6
  $fEqRock :: GHC.Classes.Eq Main.Rock
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Rock Main.$fEqRock_$c== Main.$fEqRock_$c/= -}
36242d754c4a30af0f8aab624f9e06e6
  $fEqRock_$c/= :: Main.Rock -> Main.Rock -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Rock) (b :: Main.Rock) ->
                 case Main.$fEqRock_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
36242d754c4a30af0f8aab624f9e06e6
  $fEqRock_$c== :: Main.Rock -> Main.Rock -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)))><S(S(S(S)L)LL),1*U(1*U(1*U(U),1*U(U)),1*U(U),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Rock) (w1 :: Main.Rock) ->
                 case w of ww { Main.Rock ww1 ww2 ww3 ->
                 case ww1 of ww4 { (,) ww5 ww6 ->
                 case ww5 of ww7 { GHC.Types.F# ww8 ->
                 case w1 of ww9 { Main.Rock ww10 ww11 ww12 ->
                 case ww10 of ww13 { (,) ww14 ww15 ->
                 case ww14 of ww16 { GHC.Types.F# ww17 ->
                 Main.$w$c==1 ww8 ww6 ww2 ww3 ww17 ww15 ww11 ww12 } } } } } }) -}
36f48fe65ecdd15bf9c350b7504571dd
  $fEqShip :: GHC.Classes.Eq Main.Ship
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Ship Main.$fEqShip_$c== Main.$fEqShip_$c/= -}
36f48fe65ecdd15bf9c350b7504571dd
  $fEqShip_$c/= :: Main.Ship -> Main.Ship -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Ship) (b :: Main.Ship) ->
                 case Main.$fEqShip_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
36f48fe65ecdd15bf9c350b7504571dd
  $fEqShip_$c== :: Main.Ship -> Main.Ship -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Ship) (w1 :: Main.Ship) ->
                 case w of ww { Main.Ship ww1 ww2 ->
                 case ww1 of ww3 { (,) ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.F# ww7 ->
                 case w1 of ww8 { Main.Ship ww9 ww10 ->
                 case ww9 of ww11 { (,) ww12 ww13 ->
                 case ww12 of ww14 { GHC.Types.F# ww15 ->
                 Main.$w$c==2 ww7 ww5 ww2 ww15 ww13 ww10 } } } } } }) -}
02568e80669cf5655d03a8c6d16de9a3
  $fShowAsteroidWorld :: GHC.Show.Show Main.AsteroidWorld
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.AsteroidWorld
                  Main.$fShowAsteroidWorld_$cshowsPrec
                  Main.$fShowAsteroidWorld_$cshow
                  Main.$fShowAsteroidWorld_$cshowList -}
02568e80669cf5655d03a8c6d16de9a3
  $fShowAsteroidWorld1 :: Main.AsteroidWorld -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Main.$fShowAsteroidWorld_$cshowsPrec
                   Main.$fShowAsteroidWorld2) -}
0169b932af6b982b31f06fdaf89d61af
  $fShowAsteroidWorld10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rock "#) -}
7d534afa9e39751855999efe103b1ce0
  $fShowAsteroidWorld2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
630e08ca945182e6b83ee79419591f40
  $fShowAsteroidWorld3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GameOver"#) -}
366cc179dba9342b1c440d71b7fb97a9
  $fShowAsteroidWorld4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Play "#) -}
41ec883c16d8b80831afe166a637da5a
  $fShowAsteroidWorld5 :: Main.Bullet -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.Bullet) ->
                 case w of ww { Main.Bullet ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 ww3 }) -}
b659aa2e3b29cde28c19c6a54f2e2a38
  $fShowAsteroidWorld6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Bullet "#) -}
622f52de4a42b7f06e31966a0bc8642c
  $fShowAsteroidWorld7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
5f5815138d8ffb88dc836ef748f8cf17
  $fShowAsteroidWorld8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ship "#) -}
36242d754c4a30af0f8aab624f9e06e6
  $fShowAsteroidWorld9 :: Main.Rock -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Main.Rock) ->
                 case w of ww { Main.Rock ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec2 0# ww1 ww2 ww3 }) -}
02568e80669cf5655d03a8c6d16de9a3
  $fShowAsteroidWorld_$cshow :: Main.AsteroidWorld -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.AsteroidWorld) ->
                 Main.$fShowAsteroidWorld_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
02568e80669cf5655d03a8c6d16de9a3
  $fShowAsteroidWorld_$cshowList ::
    [Main.AsteroidWorld] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.AsteroidWorld
                   Main.$fShowAsteroidWorld1) -}
02568e80669cf5655d03a8c6d16de9a3
  $fShowAsteroidWorld_$cshowsPrec ::
    GHC.Types.Int -> Main.AsteroidWorld -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Main.AsteroidWorld)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Main.Play b1 b2 b3
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ Main.Rock
                            Main.$fShowAsteroidWorld9
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case b2 of ww { Main.Ship ww1 ww2 ->
                                Main.$w$cshowsPrec1
                                  11#
                                  ww1
                                  ww2
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showSpace1
                                     (GHC.Show.showList__
                                        @ Main.Bullet
                                        Main.$fShowAsteroidWorld5
                                        b3
                                        x1)) }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.++ @ GHC.Types.Char Main.$fShowAsteroidWorld4 (g eta)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Main.$fShowAsteroidWorld4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 eta))) } }
                   Main.GameOver
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowAsteroidWorld3 eta }) -}
41ec883c16d8b80831afe166a637da5a
  $fShowBullet :: GHC.Show.Show Main.Bullet
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Bullet
                  Main.$fShowBullet_$cshowsPrec
                  Main.$fShowBullet_$cshow
                  Main.$fShowBullet_$cshowList -}
41ec883c16d8b80831afe166a637da5a
  $fShowBullet_$cshow :: Main.Bullet -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U(U),U(U)),U(U(U),U(U)),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Bullet) ->
                 Main.$fShowBullet_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
41ec883c16d8b80831afe166a637da5a
  $fShowBullet_$cshowList :: [Main.Bullet] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Bullet
                   Main.$fShowAsteroidWorld5) -}
41ec883c16d8b80831afe166a637da5a
  $fShowBullet_$cshowsPrec ::
    GHC.Types.Int -> Main.Bullet -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U(U),U(U)),U(U(U),U(U)),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Bullet) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Bullet ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 ww5 } }) -}
36242d754c4a30af0f8aab624f9e06e6
  $fShowRock :: GHC.Show.Show Main.Rock
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Rock
                  Main.$fShowRock_$cshowsPrec
                  Main.$fShowRock_$cshow
                  Main.$fShowRock_$cshowList -}
36242d754c4a30af0f8aab624f9e06e6
  $fShowRock_$cshow :: Main.Rock -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U(U),U(U)),1*U(U),U(U(U),U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Rock) ->
                 Main.$fShowRock_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
36242d754c4a30af0f8aab624f9e06e6
  $fShowRock_$cshowList :: [Main.Rock] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Rock
                   Main.$fShowAsteroidWorld9) -}
36242d754c4a30af0f8aab624f9e06e6
  $fShowRock_$cshowsPrec ::
    GHC.Types.Int -> Main.Rock -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U(U),U(U)),1*U(U),U(U(U),U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Rock) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Rock ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec2 ww1 ww3 ww4 ww5 } }) -}
36f48fe65ecdd15bf9c350b7504571dd
  $fShowShip :: GHC.Show.Show Main.Ship
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Ship
                  Main.$fShowShip_$cshowsPrec
                  Main.$fShowShip_$cshow
                  Main.$fShowShip_$cshowList -}
36f48fe65ecdd15bf9c350b7504571dd
  $fShowShip1 :: Main.Ship -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Ship) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Ship ww1 ww2 ->
                 Main.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
36f48fe65ecdd15bf9c350b7504571dd
  $fShowShip_$cshow :: Main.Ship -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Ship) ->
                 Main.$fShowShip_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
36f48fe65ecdd15bf9c350b7504571dd
  $fShowShip_$cshowList :: [Main.Ship] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Main.Ship Main.$fShowShip1) -}
36f48fe65ecdd15bf9c350b7504571dd
  $fShowShip_$cshowsPrec ::
    GHC.Types.Int -> Main.Ship -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Ship)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Ship ww3 ww4 ->
                 Main.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
a362c6c9d066a99023fd4c88cd2ee759
  $tc'Bullet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14533057039368359050##
                   4378615470775444077##
                   Main.$trModule
                   Main.$tc'Bullet1) -}
99dd213cea8467e29e682609ea5cf9c4
  $tc'Bullet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Bullet"#) -}
532d6b507b1871081c819af649775abf
  $tc'GameOver :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3451391899980584996##
                   4724146676709662412##
                   Main.$trModule
                   Main.$tc'GameOver1) -}
4bb4eeb44e1c8e869ab5d4aa70265f73
  $tc'GameOver1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GameOver"#) -}
f33b08154fa118799fddc592addd197f
  $tc'Play :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11079318598596063466##
                   11767134265205948710##
                   Main.$trModule
                   Main.$tc'Play1) -}
eb3c9defd6ec43d876d99650e0410d89
  $tc'Play1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Play"#) -}
aa110189ab45d1841c9c9ee314f8d420
  $tc'Rock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11353862468912040836##
                   17494350844943924505##
                   Main.$trModule
                   Main.$tc'Rock1) -}
03b98fb10e526a951edec908b228c0e5
  $tc'Rock1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rock"#) -}
82729510aef7ba748d999dbdf2d0bf7b
  $tc'Ship :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16887846692331552665##
                   6946442089937210802##
                   Main.$trModule
                   Main.$tc'Ship1) -}
59780cbcb505967e93c8791ad6a350ea
  $tc'Ship1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Ship"#) -}
f8c96d5381b513be4d0094135c8a847e
  $tcAsteroidWorld :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14637506219665032653##
                   11299018532447807794##
                   Main.$trModule
                   Main.$tcAsteroidWorld1) -}
861e7edcaf7942bca4f0aced44576f95
  $tcAsteroidWorld1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AsteroidWorld"#) -}
2624aaf39c02c47cc3d278add21ea781
  $tcBullet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5845814067266775939##
                   6995908709638320259##
                   Main.$trModule
                   Main.$tcBullet1) -}
1b112297ba61049096d4c1c91d587180
  $tcBullet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bullet"#) -}
f39a5b3d57469ce97493a6cb21f4bd1d
  $tcRock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10924530836931477975##
                   1449854725703248675##
                   Main.$trModule
                   Main.$tcRock1) -}
d747a499a58608e4070be9dafc39be24
  $tcRock1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Rock"#) -}
ba8803e17c83d21e85de700084c80fe8
  $tcShip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4552705915324658077##
                   16306820604633315408##
                   Main.$trModule
                   Main.$tcShip1) -}
2183f953ae5192757f096f5bbd9529a8
  $tcShip1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ship"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d0c269d265995075b01c821297af8db8
  $w$c== ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Velocity
    -> Main.Age
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Velocity
    -> Main.Age
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(U)><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Velocity)
                   (ww3 :: Main.Age)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: Main.Velocity)
                   (ww7 :: Main.Age) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww4) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww5 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of ww8 { (,) ww9 ww10 ->
                           case ww6 of ww11 { (,) ww12 ww13 ->
                           case ww9 of wild4 { GHC.Types.F# x1 ->
                           case ww12 of wild5 { GHC.Types.F# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww10 of wild7 { GHC.Types.F# x2 ->
                                case ww13 of wild8 { GHC.Types.F# y2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x2 y2) of wild9 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> GHC.Classes.eqFloat ww3 ww7 } } } } } } } } } } } }) -}
84bf6c5deacbbfd491bb55fbd3f41585
  $w$c==1 ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Size
    -> Main.Velocity
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Size
    -> Main.Velocity
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(U)><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Size)
                   (ww3 :: Main.Velocity)
                   (ww4 :: GHC.Prim.Float#)
                   (ww5 :: GHC.Types.Float)
                   (ww6 :: Main.Size)
                   (ww7 :: Main.Velocity) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww4) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww5 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild4 { GHC.Types.F# x1 ->
                           case ww6 of wild5 { GHC.Types.F# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww3 of ww8 { (,) ww9 ww10 ->
                                case ww7 of ww11 { (,) ww12 ww13 ->
                                case ww9 of wild7 { GHC.Types.F# x2 ->
                                case ww12 of wild8 { GHC.Types.F# y2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqFloat# x2 y2) of wild9 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> GHC.Classes.eqFloat ww10 ww13 } } } } } } } } } } } }) -}
d092a18b33a184d3b0f9f285ad2b4ee5
  $w$c==2 ::
    GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Velocity
    -> GHC.Prim.Float#
    -> GHC.Types.Float
    -> Main.Velocity
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))><S,U><L,1*U(U)><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (ww1 :: GHC.Types.Float)
                   (ww2 :: Main.Velocity)
                   (ww3 :: GHC.Prim.Float#)
                   (ww4 :: GHC.Types.Float)
                   (ww5 :: Main.Velocity) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqFloat# ww ww3) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.F# x ->
                      case ww4 of wild2 { GHC.Types.F# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of ww6 { (,) ww7 ww8 ->
                           case ww5 of ww9 { (,) ww10 ww11 ->
                           case ww7 of wild4 { GHC.Types.F# x1 ->
                           case ww10 of wild5 { GHC.Types.F# y1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqFloat# x1 y1) of wild6 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.eqFloat ww8 ww11 } } } } } } } } }) -}
5940b19e9e0a6308b4cc2cc38dc04d2e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.PointInSpace -> Main.Velocity -> Main.Age -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <S,U><L,U(U(U),U(U))><L,U(U(U),U(U))><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.PointInSpace)
                   (ww2 :: Main.Velocity)
                   (ww3 :: Main.Age) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww4 { GHC.Types.F# ww5 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       Main.$fShowAsteroidWorld7
                       ww5 }
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww4 { (,) ww5 ww6 ->
                     GHC.Types.:
                       @ GHC.Types.Char
                       GHC.Show.shows7
                       (case ww5 of ww7 { GHC.Types.F# ww8 ->
                        GHC.Float.$w$sshowSignedFloat1
                          GHC.Float.$fShowFloat_$sshowFloat
                          GHC.Show.shows22
                          ww8
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows5
                             (GHC.Show.$fShow(,)_$sgo
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows4
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (case ww2 of ww9 { (,) ww10 ww11 ->
                                       GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows7
                                         (case ww10 of ww12 { GHC.Types.F# ww13 ->
                                          GHC.Float.$w$sshowSignedFloat1
                                            GHC.Float.$fShowFloat_$sshowFloat
                                            GHC.Show.shows22
                                            ww13
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.shows5
                                               (GHC.Show.$fShow(,)_$sgo
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.shows4
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.showSpace1
                                                        (g x)))
                                                  (case ww11 of ww14 { GHC.Types.F# ww15 ->
                                                   GHC.Float.$w$sshowSignedFloat1
                                                     GHC.Float.$fShowFloat_$sshowFloat
                                                     GHC.Show.shows22
                                                     ww15 })
                                                  (GHC.Types.[] @ GHC.Show.ShowS))) }) })))
                                (case ww6 of ww9 { GHC.Types.F# ww10 ->
                                 GHC.Float.$w$sshowSignedFloat1
                                   GHC.Float.$fShowFloat_$sshowFloat
                                   GHC.Show.shows22
                                   ww10 })
                                (GHC.Types.[] @ GHC.Show.ShowS))) }) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Main.$fShowAsteroidWorld6 (g1 x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowAsteroidWorld6
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
9b41f5f90e9db74b5af2d6bdf69985c4
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Main.PointInSpace
    -> Main.Velocity
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <S,U><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U),1*U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.PointInSpace)
                   (ww2 :: Main.Velocity)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     case ww1 of ww3 { (,) ww4 ww5 ->
                     GHC.Types.:
                       @ GHC.Types.Char
                       GHC.Show.shows7
                       (case ww4 of ww6 { GHC.Types.F# ww7 ->
                        GHC.Float.$w$sshowSignedFloat1
                          GHC.Float.$fShowFloat_$sshowFloat
                          GHC.Show.shows22
                          ww7
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows5
                             (GHC.Show.$fShow(,)_$sgo
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows4
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (case ww2 of ww8 { (,) ww9 ww10 ->
                                       GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.shows7
                                         (case ww9 of ww11 { GHC.Types.F# ww12 ->
                                          GHC.Float.$w$sshowSignedFloat1
                                            GHC.Float.$fShowFloat_$sshowFloat
                                            GHC.Show.shows22
                                            ww12
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.shows5
                                               (GHC.Show.$fShow(,)_$sgo
                                                  (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)
                                                  (case ww10 of ww13 { GHC.Types.F# ww14 ->
                                                   GHC.Float.$w$sshowSignedFloat1
                                                     GHC.Float.$fShowFloat_$sshowFloat
                                                     GHC.Show.shows22
                                                     ww14 })
                                                  (GHC.Types.[] @ GHC.Show.ShowS))) }) })))
                                (case ww5 of ww8 { GHC.Types.F# ww9 ->
                                 GHC.Float.$w$sshowSignedFloat1
                                   GHC.Float.$fShowFloat_$sshowFloat
                                   GHC.Show.shows22
                                   ww9 })
                                (GHC.Types.[] @ GHC.Show.ShowS))) }) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowAsteroidWorld8 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowAsteroidWorld8
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
450310f07122ba06b1d01df99a3839b7
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Main.PointInSpace
    -> Main.Size
    -> Main.Velocity
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <S,U><L,U(U(U),U(U))><L,1*U(U)><L,U(U(U),U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.PointInSpace)
                   (ww2 :: Main.Size)
                   (ww3 :: Main.Velocity) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww4 { GHC.Types.F# ww5 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat_$sshowFloat
                       Main.$fShowAsteroidWorld7
                       ww5 }
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww4 { (,) ww5 ww6 ->
                     GHC.Types.:
                       @ GHC.Types.Char
                       GHC.Show.shows7
                       (case ww5 of ww7 { GHC.Types.F# ww8 ->
                        GHC.Float.$w$sshowSignedFloat1
                          GHC.Float.$fShowFloat_$sshowFloat
                          GHC.Show.shows22
                          ww8
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows5
                             (GHC.Show.$fShow(,)_$sgo
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows4
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (f (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showSpace1
                                            (case ww3 of ww9 { (,) ww10 ww11 ->
                                             GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.shows7
                                               (case ww10 of ww12 { GHC.Types.F# ww13 ->
                                                GHC.Float.$w$sshowSignedFloat1
                                                  GHC.Float.$fShowFloat_$sshowFloat
                                                  GHC.Show.shows22
                                                  ww13
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.shows5
                                                     (GHC.Show.$fShow(,)_$sgo
                                                        (GHC.Types.:
                                                           @ GHC.Types.Char
                                                           GHC.Show.shows4
                                                           x)
                                                        (case ww11 of ww14 { GHC.Types.F# ww15 ->
                                                         GHC.Float.$w$sshowSignedFloat1
                                                           GHC.Float.$fShowFloat_$sshowFloat
                                                           GHC.Show.shows22
                                                           ww15 })
                                                        (GHC.Types.[] @ GHC.Show.ShowS))) }) })))))
                                (case ww6 of ww9 { GHC.Types.F# ww10 ->
                                 GHC.Float.$w$sshowSignedFloat1
                                   GHC.Float.$fShowFloat_$sshowFloat
                                   GHC.Show.shows22
                                   ww10 })
                                (GHC.Types.[] @ GHC.Show.ShowS))) }) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Main.$fShowAsteroidWorld10 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowAsteroidWorld10
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
c828018cf710b7aaa44bf5b1c180a6c0
  $wrestoreToScreen ::
    GHC.Types.Float
    -> GHC.Types.Float -> (# GHC.Types.Float, GHC.Types.Float #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Float) (ww1 :: GHC.Types.Float) ->
                 (# case ww of wild { GHC.Types.F# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.ltFloat# x -400.0#) of wild1 {
                      GHC.Types.False
                      -> case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.gtFloat# x 400.0#) of wild2 {
                           GHC.Types.False -> wild
                           GHC.Types.True -> GHC.Types.F# (GHC.Prim.minusFloat# x 800.0#) }
                      GHC.Types.True -> GHC.Types.F# (GHC.Prim.plusFloat# 800.0# x) } },
                    case ww1 of wild { GHC.Types.F# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.ltFloat# x -400.0#) of wild1 {
                      GHC.Types.False
                      -> case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.gtFloat# x 400.0#) of wild2 {
                           GHC.Types.False -> wild
                           GHC.Types.True -> GHC.Types.F# (GHC.Prim.minusFloat# x 800.0#) }
                      GHC.Types.True
                      -> GHC.Types.F# (GHC.Prim.plusFloat# 800.0# x) } } #)) -}
45c1055043d2211cfe2915e100e9e023
  $wsplitRock ::
    Main.PointInSpace
    -> Main.Size -> Main.Velocity -> (# Main.Rock, [Main.Rock] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,U(U)><L,U(U(U),U(U))>, Inline: [0],
     Unfolding: (\ (ww :: Main.PointInSpace)
                   (ww1 :: Main.Size)
                   (ww2 :: Main.Velocity) ->
                 (# Main.Rock
                      ww
                      (case ww1 of wild { GHC.Types.F# x ->
                       GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                      (case ww2 of wild { (,) x y ->
                       (case x of wild1 { GHC.Types.F# x1 ->
                        case y of wild2 { GHC.Types.F# x2 ->
                        GHC.Types.F#
                          (GHC.Prim.timesFloat#
                             3.0#
                             (GHC.Prim.minusFloat#
                                (GHC.Prim.timesFloat# x1 (GHC.Prim.cosFloat# 1.0471976#))
                                (GHC.Prim.timesFloat# x2 (GHC.Prim.sinFloat# 1.0471976#)))) } },
                        case x of wild1 { GHC.Types.F# x1 ->
                        case y of wild2 { GHC.Types.F# x2 ->
                        GHC.Types.F#
                          (GHC.Prim.timesFloat#
                             3.0#
                             (GHC.Prim.plusFloat#
                                (GHC.Prim.timesFloat# x1 (GHC.Prim.sinFloat# 1.0471976#))
                                (GHC.Prim.timesFloat#
                                   x2
                                   (GHC.Prim.cosFloat# 1.0471976#)))) } }) }),
                    GHC.Types.:
                      @ Main.Rock
                      (Main.Rock
                         ww
                         (case ww1 of wild { GHC.Types.F# x ->
                          GHC.Types.F# (GHC.Prim.divideFloat# x 2.0#) })
                         (case ww2 of wild { (,) x y ->
                          (case x of wild1 { GHC.Types.F# x1 ->
                           case y of wild2 { GHC.Types.F# x2 ->
                           GHC.Types.F#
                             (GHC.Prim.timesFloat#
                                3.0#
                                (GHC.Prim.minusFloat#
                                   (GHC.Prim.timesFloat# x1 (GHC.Prim.cosFloat# -1.0471976#))
                                   (GHC.Prim.timesFloat# x2 (GHC.Prim.sinFloat# -1.0471976#)))) } },
                           case x of wild1 { GHC.Types.F# x1 ->
                           case y of wild2 { GHC.Types.F# x2 ->
                           GHC.Types.F#
                             (GHC.Prim.timesFloat#
                                3.0#
                                (GHC.Prim.plusFloat#
                                   (GHC.Prim.timesFloat# x1 (GHC.Prim.sinFloat# -1.0471976#))
                                   (GHC.Prim.timesFloat#
                                      x2
                                      (GHC.Prim.cosFloat# -1.0471976#)))) } }) }))
                      (GHC.Types.[] @ Main.Rock) #)) -}
3888b7ea7b487d0f15286d7d6c92ff19
  (.*) :: GHC.Types.Float -> Main.PointInSpace -> Main.PointInSpace
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U)><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: GHC.Types.Float)
                   (ds :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) u v ->
                 (GHC.Float.timesFloat s u, GHC.Float.timesFloat s v) }) -}
9e677889b92777b41a7bbef8663c89bb
  (.+) :: Main.PointInSpace -> Main.PointInSpace -> Main.PointInSpace
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U))><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (GHC.Types.Float, GHC.Types.Float))
                   (ds1 :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) x y ->
                 case ds1 of wild1 { (,) u v ->
                 (GHC.Float.plusFloat x u, GHC.Float.plusFloat y v) } }) -}
4b736889e5515f089a3b5051a6b323c4
  (.-) :: Main.PointInSpace -> Main.PointInSpace -> Main.PointInSpace
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U))><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (GHC.Types.Float, GHC.Types.Float))
                   (ds1 :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) x y ->
                 case ds1 of wild1 { (,) u v ->
                 (GHC.Float.minusFloat x u, GHC.Float.minusFloat y v) } }) -}
280b29f7cb2c98abc69803cd9fdecdf8
  type Age = GHC.Types.Float
02568e80669cf5655d03a8c6d16de9a3
  data AsteroidWorld
    = Play [Main.Rock] Main.Ship [Main.Bullet] | GameOver
41ec883c16d8b80831afe166a637da5a
  data Bullet = Bullet Main.PointInSpace Main.Velocity Main.Age
ec7fc31bdbb22a868a082d3966b5b65a
  type PointInSpace = (GHC.Types.Float, GHC.Types.Float)
36242d754c4a30af0f8aab624f9e06e6
  data Rock = Rock Main.PointInSpace Main.Size Main.Velocity
36f48fe65ecdd15bf9c350b7504571dd
  data Ship = Ship Main.PointInSpace Main.Velocity
e7070d88aaf59a83d9e0d0886d37620d
  type Size = GHC.Types.Float
7c23489e6a108cb584f6d3e12cd21a9c
  type Velocity = (GHC.Types.Float, GHC.Types.Float)
bab4cc2642f1adcbf03b8ddc974c5ddf
  cycleCoordinates :: (GHC.Classes.Ord a, GHC.Num.Num a) => a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLLL),U(A,A,1*C1(C1(U)),A,1*C1(C1(U)),A,A,A)><L,U(1*C1(C1(U)),1*C1(C1(U)),A,1*C1(U),A,A,C(U))><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dNum :: GHC.Num.Num a)
                   (x :: a) ->
                 case GHC.Classes.<
                        @ a
                        $dOrd
                        x
                        (GHC.Num.negate
                           @ a
                           $dNum
                           (GHC.Num.fromInteger @ a $dNum Main.cycleCoordinates2)) of wild {
                   GHC.Types.False
                   -> case GHC.Classes.>
                             @ a
                             $dOrd
                             x
                             (GHC.Num.fromInteger @ a $dNum Main.cycleCoordinates2) of wild1 {
                        GHC.Types.False -> x
                        GHC.Types.True
                        -> GHC.Num.-
                             @ a
                             $dNum
                             x
                             (GHC.Num.fromInteger @ a $dNum Main.cycleCoordinates1) }
                   GHC.Types.True
                   -> GHC.Num.+
                        @ a
                        $dNum
                        (GHC.Num.fromInteger @ a $dNum Main.cycleCoordinates1)
                        x }) -}
356c9a0f8aac982881902da52048771c
  cycleCoordinates1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (800) -}
2f8675a856d476c7447e67077d1f25e6
  cycleCoordinates2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (400) -}
d7cb43ccd3b5625f0366a67235d66756
  drawWorld ::
    Main.AsteroidWorld -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Main.AsteroidWorld) ->
                 case ds of wild {
                   Main.Play rocks ds1 bullets
                   -> case ds1 of wild1 { Main.Ship ds2 ds3 ->
                      case ds2 of wild2 { (,) x y ->
                      case ds3 of wild3 { (,) vx vy ->
                      Graphics.Gloss.Internals.Data.Picture.Pictures
                        (GHC.Types.:
                           @ Graphics.Gloss.Internals.Data.Picture.Picture
                           (Graphics.Gloss.Internals.Data.Picture.Color
                              Graphics.Gloss.Data.Color.red
                              (Graphics.Gloss.Internals.Data.Picture.Pictures
                                 (GHC.Types.:
                                    @ Graphics.Gloss.Internals.Data.Picture.Picture
                                    (Graphics.Gloss.Internals.Data.Picture.Translate
                                       x
                                       y
                                       Main.drawWorld9)
                                    (GHC.Types.[]
                                       @ Graphics.Gloss.Internals.Data.Picture.Picture))))
                           (GHC.Types.:
                              @ Graphics.Gloss.Internals.Data.Picture.Picture
                              (Graphics.Gloss.Internals.Data.Picture.Pictures
                                 (Main.drawWorld_go1 rocks))
                              (GHC.Types.:
                                 @ Graphics.Gloss.Internals.Data.Picture.Picture
                                 (Graphics.Gloss.Internals.Data.Picture.Pictures
                                    (Main.drawWorld_go bullets))
                                 (GHC.Types.[]
                                    @ Graphics.Gloss.Internals.Data.Picture.Picture)))) } } }
                   Main.GameOver -> Main.drawWorld1 }) -}
942e7b102f40e3a37b097c4ae2aa2ded
  drawWorld1 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m13,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Scale
                   Main.drawWorld8
                   Main.drawWorld8
                   Main.drawWorld2) -}
cc5a819c136876aaa6be571907bd4f1d
  drawWorld10 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 10.0#) -}
f688307125574be9dd98837650c44be5
  drawWorld2 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m11,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Translate
                   Main.drawWorld7
                   Main.drawWorld6
                   Main.drawWorld3) -}
6568de5e2fc00a0a0442d578ff54c13a
  drawWorld3 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m10,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Color
                   Graphics.Gloss.Data.Color.red
                   Main.drawWorld4) -}
8ffedde2ad0bc0e845213de617185261
  drawWorld4 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- Strictness: m8,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Text
                   Main.drawWorld5) -}
431887ad6f855f01f40e434559c59da6
  drawWorld5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Game Over!"#) -}
37db9121c3815ecf99391975f878a9f9
  drawWorld6 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
376562265767bc83b293793c4cc68087
  drawWorld7 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -400.0#) -}
0ce3941222876a4ce07750b91b71fdcb
  drawWorld8 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.3#) -}
6deeef557b7f8582a2063caf35a671ef
  drawWorld9 :: Graphics.Gloss.Internals.Data.Picture.Picture
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (Graphics.Gloss.Internals.Data.Picture.Circle
                   Main.drawWorld10) -}
521226200724a5d55e8dfd178a2cef44
  drawWorld_go ::
    [Main.Bullet] -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d4ec675885b1511f8a18164d31f61f5c
  drawWorld_go1 ::
    [Main.Rock] -> [Graphics.Gloss.Internals.Data.Picture.Picture]
  {- Arity: 1, Strictness: <S,1*U> -}
491c7123ff28c8decb9fa97d7b8abdc9
  handleEvents ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Main.AsteroidWorld -> Main.AsteroidWorld
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Unfolding: (\ (ds :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (ds1 :: Main.AsteroidWorld) ->
                 case ds1 of wild {
                   Main.Play ipv ipv1 ipv2
                   -> case ds of wild1 {
                        DEFAULT -> wild
                        Graphics.Gloss.Internals.Interface.Event.EventKey ds2 ds3 ds4 clickPos
                        -> case ds2 of wild2 {
                             DEFAULT -> wild
                             Graphics.Gloss.Internals.Interface.Backend.Types.MouseButton ds5
                             -> case ds5 of wild3 {
                                  DEFAULT -> wild
                                  Graphics.Gloss.Internals.Interface.Backend.Types.LeftButton
                                  -> case ds3 of wild4 {
                                       Graphics.Gloss.Internals.Interface.Backend.Types.Down
                                       -> case ipv1 of wild5 { Main.Ship shipPos shipVel ->
                                          Main.Play
                                            ipv
                                            (Main.Ship
                                               shipPos
                                               (case shipVel of wild6 { (,) x y ->
                                                case shipPos of wild7 { (,) x1 y1 ->
                                                case clickPos of wild8 { (,) u v ->
                                                let {
                                                  x2 :: GHC.Types.Float
                                                  = case x1 of wild9 { GHC.Types.F# x3 ->
                                                    case u of wild10 { GHC.Types.F# y2 ->
                                                    GHC.Types.F# (GHC.Prim.minusFloat# x3 y2) } }
                                                } in
                                                let {
                                                  y2 :: GHC.Types.Float
                                                  = case y1 of wild9 { GHC.Types.F# x3 ->
                                                    case v of wild10 { GHC.Types.F# y3 ->
                                                    GHC.Types.F# (GHC.Prim.minusFloat# x3 y3) } }
                                                } in
                                                let {
                                                  m :: GHC.Types.Float
                                                  = case x2 of wild9 { GHC.Types.F# x3 ->
                                                    case y2 of wild10 { GHC.Types.F# x4 ->
                                                    GHC.Types.F#
                                                      (GHC.Prim.sqrtFloat#
                                                         (GHC.Prim.plusFloat#
                                                            (GHC.Prim.powerFloat# x3 2.0#)
                                                            (GHC.Prim.powerFloat# x4 2.0#))) } }
                                                } in
                                                (case x of wild9 { GHC.Types.F# x3 ->
                                                 case x2 of wild10 { GHC.Types.F# x4 ->
                                                 case m of wild11 { GHC.Types.F# y3 ->
                                                 case GHC.Prim.divideFloat#
                                                        x4
                                                        y3 of wild12 { DEFAULT ->
                                                 GHC.Types.F#
                                                   (GHC.Prim.plusFloat#
                                                      x3
                                                      (GHC.Prim.timesFloat# 50.0# wild12)) } } } },
                                                 case y of wild9 { GHC.Types.F# x3 ->
                                                 case y2 of wild10 { GHC.Types.F# x4 ->
                                                 case m of wild11 { GHC.Types.F# y3 ->
                                                 case GHC.Prim.divideFloat#
                                                        x4
                                                        y3 of wild12 { DEFAULT ->
                                                 GHC.Types.F#
                                                   (GHC.Prim.plusFloat#
                                                      x3
                                                      (GHC.Prim.timesFloat#
                                                         50.0#
                                                         wild12)) } } } }) } } }))
                                            (GHC.Types.:
                                               @ Main.Bullet
                                               (Main.Bullet
                                                  shipPos
                                                  (case shipPos of wild6 { (,) x y ->
                                                   case clickPos of wild7 { (,) u v ->
                                                   let {
                                                     x1 :: GHC.Types.Float
                                                     = case x of wild8 { GHC.Types.F# x2 ->
                                                       case u of wild9 { GHC.Types.F# y1 ->
                                                       GHC.Types.F# (GHC.Prim.minusFloat# x2 y1) } }
                                                   } in
                                                   let {
                                                     y1 :: GHC.Types.Float
                                                     = case y of wild8 { GHC.Types.F# x2 ->
                                                       case v of wild9 { GHC.Types.F# y2 ->
                                                       GHC.Types.F# (GHC.Prim.minusFloat# x2 y2) } }
                                                   } in
                                                   let {
                                                     m :: GHC.Types.Float
                                                     = case x1 of wild8 { GHC.Types.F# x2 ->
                                                       case y1 of wild9 { GHC.Types.F# x3 ->
                                                       GHC.Types.F#
                                                         (GHC.Prim.sqrtFloat#
                                                            (GHC.Prim.plusFloat#
                                                               (GHC.Prim.powerFloat# x2 2.0#)
                                                               (GHC.Prim.powerFloat# x3 2.0#))) } }
                                                   } in
                                                   (case x1 of wild8 { GHC.Types.F# x2 ->
                                                    case m of wild9 { GHC.Types.F# y2 ->
                                                    case GHC.Prim.divideFloat#
                                                           x2
                                                           y2 of wild10 { DEFAULT ->
                                                    GHC.Types.F#
                                                      (GHC.Prim.negateFloat#
                                                         (GHC.Prim.timesFloat#
                                                            150.0#
                                                            wild10)) } } },
                                                    case y1 of wild8 { GHC.Types.F# x2 ->
                                                    case m of wild9 { GHC.Types.F# y2 ->
                                                    case GHC.Prim.divideFloat#
                                                           x2
                                                           y2 of wild10 { DEFAULT ->
                                                    GHC.Types.F#
                                                      (GHC.Prim.negateFloat#
                                                         (GHC.Prim.timesFloat#
                                                            150.0#
                                                            wild10)) } } }) } })
                                                  Main.drawWorld6)
                                               ipv2) }
                                       Graphics.Gloss.Internals.Interface.Backend.Types.Up
                                       -> wild } } } }
                   Main.GameOver -> Main.GameOver }) -}
ad9b468cd41d76aa9c4265afa9ac21c4
  initialWorld :: Main.AsteroidWorld
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Main.Play
                   Main.initialWorld5
                   Main.initialWorld1
                   (GHC.Types.[] @ Main.Bullet)) -}
0f72311bc5039556ed1cbf1cc04292c1
  initialWorld1 :: Main.Ship
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Ship Main.initialWorld4 Main.initialWorld2) -}
0f12021352c1c52d3ce541f2d76af83d
  initialWorld10 :: Main.Rock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rock
                   Main.initialWorld15
                   Main.initialWorld14
                   Main.initialWorld11) -}
4cea0f7fb36a66eccf50a3e0e0953cd6
  initialWorld11 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld13, Main.initialWorld12)) -}
0b3c625481c9e9fd6935687a4bcc3b7e
  initialWorld12 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 2.0#) -}
733397881bc8df5aaaea1919f0ca4fa6
  initialWorld13 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 8.0#) -}
5f4a11423c550e3a7b24fa0d0954d881
  initialWorld14 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 25.0#) -}
cfe308b234c44168d58f0b520428a285
  initialWorld15 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld17, Main.initialWorld16)) -}
4692d2ed0312410e099416e1613c71dd
  initialWorld16 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -201.0#) -}
1cb8e8b66d33842810a1d2b75afb7880
  initialWorld17 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -45.0#) -}
0a8ddd68dce1598696ac657658e9c892
  initialWorld18 :: Main.Rock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rock
                   Main.initialWorld23
                   Main.initialWorld22
                   Main.initialWorld19) -}
d07222fba898a4523947243f32bed79f
  initialWorld19 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld21, Main.initialWorld20)) -}
5ff976fb72e4a0c2058e25720f977d0a
  initialWorld2 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.drawWorld6, Main.initialWorld3)) -}
91000a9523266c0357555a87b7b0e259
  initialWorld20 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -8.0#) -}
5bf0f060188b777901d1ae97c001193b
  initialWorld21 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -2.0#) -}
a44637f3e9a9986e7cdc87659937e50a
  initialWorld22 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 30.0#) -}
9be4eed5c7e63d197ff1aa6476f3a1ec
  initialWorld23 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld25, Main.initialWorld24)) -}
d1b73e6cc5eba2ca61e348a40d7fc2c0
  initialWorld24 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# -15.0#) -}
dc1e07a9020d3ccbef38e1d97c324260
  initialWorld25 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# -210.0#) -}
20e50f0034ea14663ef45ee05ce0dae3
  initialWorld26 :: Main.Rock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rock
                   Main.initialWorld28
                   Main.initialWorld14
                   Main.initialWorld27) -}
3a479a7b0ba5fd6c4655195766f457b5
  initialWorld27 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld21, Main.initialWorld13)) -}
63b67245bcf7aa7cfc96b1f419e89874
  initialWorld28 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld30, Main.initialWorld29)) -}
3a94e732b53694899bfbaa5daef250e7
  initialWorld29 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 22.0#) -}
6353879a8fcb9e4c3b44ec87f3fd1f49
  initialWorld3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 5.0#) -}
3504dfaad1ead2a52c2d0337192c4686
  initialWorld30 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 45.0#) -}
3ce4f6ad1ceef8b42fdbfaf98955f867
  initialWorld31 :: Main.Rock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rock
                   Main.initialWorld34
                   Main.initialWorld30
                   Main.initialWorld32) -}
106dc310c22f825831e63ca626f8004b
  initialWorld32 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld33, Main.initialWorld20)) -}
fafd3182032ceef01b8e9f22464bd6e2
  initialWorld33 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 13.0#) -}
3b2adfb0722044329bfdc578740d5ec1
  initialWorld34 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld17, Main.initialWorld35)) -}
1315e86bf3f332b2c672295610cd0448
  initialWorld35 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 201.0#) -}
9b5f6cafffa9cdda2a22fc6b9696da0c
  initialWorld36 :: Main.Rock
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rock
                   Main.initialWorld39
                   Main.initialWorld30
                   Main.initialWorld37) -}
98ab43a2beb1b11703a65fef375e9026
  initialWorld37 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld12, Main.initialWorld38)) -}
d3d87d984c00d8e0a1345c7c4c3ab9d1
  initialWorld38 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 6.0#) -}
51110e71eebd57b0f436ae86710096c2
  initialWorld39 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.initialWorld40, Main.initialWorld40)) -}
aa3a90639654ba335d87ad0dc42fb8d2
  initialWorld4 :: (GHC.Types.Float, GHC.Types.Float)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.drawWorld6, Main.drawWorld6)) -}
46213182e063f9adb1fa716b320072a9
  initialWorld40 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 150.0#) -}
ddb58c0bd8e9bffc2d9843e7a35f8f92
  initialWorld5 :: [Main.Rock]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Rock
                   Main.initialWorld36
                   Main.initialWorld6) -}
952ef06d8fa2fd3cfa7ed20186266307
  initialWorld6 :: [Main.Rock]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Rock
                   Main.initialWorld31
                   Main.initialWorld7) -}
de1691e6089125f62302b785c47078b4
  initialWorld7 :: [Main.Rock]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Rock
                   Main.initialWorld26
                   Main.initialWorld8) -}
141783706a949ffa43838896aefb49aa
  initialWorld8 :: [Main.Rock]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Rock
                   Main.initialWorld18
                   Main.initialWorld9) -}
dc06ecfea05286ef765ada236c9ad5c3
  initialWorld9 :: [Main.Rock]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Rock
                   Main.initialWorld10
                   (GHC.Types.[] @ Main.Rock)) -}
eb4f94691e9bc81a5d9d4e18533b9fab
  limitMag ::
    GHC.Types.Float -> Main.PointInSpace -> Main.PointInSpace
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S(S)S(S)),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w1 :: Main.PointInSpace) ->
                 case w of ww { GHC.Types.F# ww1 ->
                 case w1 of ww2 { (,) ww3 ww4 ->
                 case ww3 of ww5 { GHC.Types.F# ww6 ->
                 case ww4 of ww7 { GHC.Types.F# ww8 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.gtFloat#
                           (GHC.Prim.sqrtFloat#
                              (GHC.Prim.plusFloat#
                                 (GHC.Prim.powerFloat# ww6 2.0#)
                                 (GHC.Prim.powerFloat# ww8 2.0#)))
                           ww1) of wild {
                   GHC.Types.False -> (GHC.Types.F# ww6, GHC.Types.F# ww8)
                   GHC.Types.True
                   -> let {
                        m :: GHC.Prim.Float#
                        = GHC.Prim.sqrtFloat#
                            (GHC.Prim.plusFloat#
                               (GHC.Prim.powerFloat# ww6 2.0#)
                               (GHC.Prim.powerFloat# ww8 2.0#))
                      } in
                      (case GHC.Prim.divideFloat# ww6 m of wild2 { DEFAULT ->
                       GHC.Types.F# (GHC.Prim.timesFloat# ww1 wild2) },
                       case GHC.Prim.divideFloat# ww8 m of wild2 { DEFAULT ->
                       GHC.Types.F# (GHC.Prim.timesFloat# ww1 wild2) }) } } } } }) -}
d0938250c1a2d94c2c675fbb7805e219
  magV :: Main.PointInSpace -> GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.Types.Float, GHC.Types.Float)) ->
                 case ds of wild { (,) x y ->
                 case x of wild1 { GHC.Types.F# x1 ->
                 case y of wild2 { GHC.Types.F# x2 ->
                 GHC.Types.F#
                   (GHC.Prim.sqrtFloat#
                      (GHC.Prim.plusFloat#
                         (GHC.Prim.powerFloat# x1 2.0#)
                         (GHC.Prim.powerFloat# x2 2.0#))) } } }) -}
4ac9f9abca4353780113521f08257fca
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
fe141d4746d0f57f2a3f5e94e17fa1c9
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Graphics.Gloss.Internals.Interface.Game.playWithBackendIO1
                        @ Main.AsteroidWorld
                        @ Graphics.Gloss.Internals.Interface.Backend.GLUT.GLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.$fBackendGLUTState
                        Graphics.Gloss.Internals.Interface.Backend.GLUT.glutStateInit
                        Main.main6
                        Graphics.Gloss.Data.Color.black
                        Main.main5
                        Main.initialWorld
                        Main.main4
                          `cast`
                        (<Main.AsteroidWorld>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Graphics.Gloss.Internals.Data.Picture.Picture>_R))
                        Main.main3
                          `cast`
                        (<Graphics.Gloss.Internals.Interface.Event.Event>_R
                         ->_R <Main.AsteroidWorld>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Main.AsteroidWorld>_R))
                        Main.main2
                          `cast`
                        (<GHC.Types.Float>_R
                         ->_R <Main.AsteroidWorld>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Main.AsteroidWorld>_R))
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) }) -}
dec3c3abd1cdc1985e94a471eb86a854
  main10 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 550#) -}
70518a9724e54f527bfed0a9d9d0f620
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Asteroids!"#) -}
27ebde8372c6f84868dc2ef21bd9d282
  main12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
940621cac86e96a9192f198a24789b88
  main2 ::
    GHC.Types.Float
    -> Main.AsteroidWorld
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.AsteroidWorld #)
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (time :: GHC.Types.Float)
                   (world1 :: Main.AsteroidWorld)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.simulateWorld time world1 #)) -}
6f4a5675297005c22211842d132d9d30
  main3 ::
    Graphics.Gloss.Internals.Interface.Event.Event
    -> Main.AsteroidWorld
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.AsteroidWorld #)
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ (event :: Graphics.Gloss.Internals.Interface.Event.Event)
                   (world1 :: Main.AsteroidWorld)[OneShot]
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.handleEvents event world1 #)) -}
021737121798aa93d2f3b565c0c6cf5c
  main4 ::
    Main.AsteroidWorld
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 2,
     Unfolding: (\ (x :: Main.AsteroidWorld)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, Main.drawWorld x #)) -}
7552dfb60855b2648d30f6d8ec2f7ce2
  main5 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 24#) -}
b26677054effe9d47de5ed635cb00709
  main6 :: Graphics.Gloss.Data.Display.Display
  {- Unfolding: (Graphics.Gloss.Data.Display.InWindow
                   Main.main11
                   Main.main9
                   Main.main7) -}
589eebeff73ce32b2af2631b7097f02c
  main7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main8, Main.main8)) -}
66f0036c806f9f76caf0755f62f0489d
  main8 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 20#) -}
685bd115e3db5653acef6510b99be32a
  main9 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main10, Main.main10)) -}
7b3717eafa3e49a6450b26ee7216a9f3
  norm :: Main.PointInSpace -> Main.PointInSpace
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.PointInSpace) ->
                 case w of ww { (,) ww1 ww2 ->
                 let {
                   m :: GHC.Types.Float
                   = case ww1 of wild { GHC.Types.F# x ->
                     case ww2 of wild1 { GHC.Types.F# x1 ->
                     GHC.Types.F#
                       (GHC.Prim.sqrtFloat#
                          (GHC.Prim.plusFloat#
                             (GHC.Prim.powerFloat# x 2.0#)
                             (GHC.Prim.powerFloat# x1 2.0#))) } }
                 } in
                 (GHC.Float.divideFloat ww1 m, GHC.Float.divideFloat ww2 m) }) -}
e463d91d55eac57b6609acd44e7fcaae
  restoreToScreen :: Main.PointInSpace -> Main.PointInSpace
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U(U),1*U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.PointInSpace) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Main.$wrestoreToScreen ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
68f0227a26e4168a29af72fb669250dc
  rotateV ::
    GHC.Types.Float -> Main.PointInSpace -> Main.PointInSpace
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float) (w1 :: Main.PointInSpace) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 (case ww1 of wild { GHC.Types.F# x ->
                  case w of wild1 { GHC.Types.F# x1 ->
                  case ww2 of wild2 { GHC.Types.F# x2 ->
                  GHC.Types.F#
                    (GHC.Prim.minusFloat#
                       (GHC.Prim.timesFloat# x (GHC.Prim.cosFloat# x1))
                       (GHC.Prim.timesFloat# x2 (GHC.Prim.sinFloat# x1))) } } },
                  case ww1 of wild { GHC.Types.F# x ->
                  case w of wild1 { GHC.Types.F# x1 ->
                  case ww2 of wild2 { GHC.Types.F# x2 ->
                  GHC.Types.F#
                    (GHC.Prim.plusFloat#
                       (GHC.Prim.timesFloat# x (GHC.Prim.sinFloat# x1))
                       (GHC.Prim.timesFloat# x2 (GHC.Prim.cosFloat# x1))) } } }) }) -}
075b946a29edc40331175f158b29b02c
  simulateWorld ::
    GHC.Types.Float -> Main.AsteroidWorld -> Main.AsteroidWorld
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U> -}
68ca11eb092ed885286fa714875e7161
  splitRock :: Main.Rock -> [Main.Rock]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U(U),U(U(U),U(U)))>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Rock) ->
                 case w of ww { Main.Rock ww1 ww2 ww3 ->
                 case Main.$wsplitRock ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ Main.Rock ww5 ww6 } }) -}
instance GHC.Classes.Eq [Main.AsteroidWorld]
  = Main.$fEqAsteroidWorld
instance GHC.Classes.Eq [Main.Bullet] = Main.$fEqBullet
instance GHC.Classes.Eq [Main.Rock] = Main.$fEqRock
instance GHC.Classes.Eq [Main.Ship] = Main.$fEqShip
instance GHC.Show.Show [Main.AsteroidWorld]
  = Main.$fShowAsteroidWorld
instance GHC.Show.Show [Main.Bullet] = Main.$fShowBullet
instance GHC.Show.Show [Main.Rock] = Main.$fShowRock
instance GHC.Show.Show [Main.Ship] = Main.$fShowShip
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

